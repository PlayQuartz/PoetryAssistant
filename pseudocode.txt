function getRhymes(searchWord, phonetic_dictionary)

	word ← LOWERCASE(searchWord) // Returns searchWord in lowercase
 	word_phonetic ← phonetic_dictionary[word] // Returns the phonetic of word || phonetic_dictionary is a dictionary with words as keys and their phonetics as values
	rhyming_words ← new DynamicArray
	dictionary_keys ← KEYS(phonetic_dictionary) // Returns all the keys of phonetic_dictionary as a list, each key is an element inside the list
	
	if word_phonetic = false then
		return rhyming_words
	end if
	word_phonetic ← SPLIT(word_phonetic, " ") // returns all the phonemes in a list seperated by a space
	word_phonetic_len ← LENGTH(word_phonetic) // returns the length of word_phonetic

	for 0 <= x < LENGTH(dictionary_keys) do
		current_word ← dictionary_keys[x]
		current_word_phonetic ← phonetic_dictionary[current_word] 
		if current_word_phonetic then
			current_word_phonetic ← SPLIT(current_word_phonetic, " ")
			current_word_phonetic_len ← LENGTH(current_word_phonetic)
			for 1 <= y <= MIN(current_word_phonetic_len, word_phonetic_len) do
				if current_word_phonetic[current_word_phonetic_len-y] = word_phonetic[word_phonetic_len-y] then
					if y >= 2 then
						if current_word ≠ word then
							APPEND(rhyming_words, current_word)
						end if
					end if
				else
					break
				end if
			end for

		end if
	end for
	
	return rhyming_words
end function

function getMeter(searchSentence, phonetic_dictionary)
	sentence ← SPLIT(REPLACE(REPLACE(searchSentence, ".", ""), ",", ""), " ") 
	meter ← new DynamicArray
	for 0 <= x < LENGTH(sentence) do
		current_meter ← ""
		current_word ← LOWERCASE(sentence[x])
		current_word_phonetic ← phonetic_dictionary[current_word]
		if current_word_phonetic then
			for 0 <= y < LENGTH(current_word_phonetic) do
				if current_word_phonetic[y] IN ["0", "1", "2"] then
					current_meter ← current_meter + {"0": "´", "1": "˘", "2": "˘"}[c]
				end if
			end for
		end if
		APPEND(meter, current_meter)
	end for
	return meter
end function

function getAlliteration(searchWord, phonetic_dictionary)
	word ← LOWERCASE(searchWord)
	word_phonetic ← phonetic_dictionary[word]
	alliteration_words ← new DynamicArray
	dictionary_keys ← KEYS(phonetic_dictionary) 
	if word_phonetic = false then
		return alliteration_word
	end if
	word_first_phoneme ← SPLIT(word_phonetic)[0]
	for 0 <= x <= LENGTH(dictionary_keys) do
		current_word_phonetic = phonetic_dictionary[dictionary_keys[x]]
		if current_word_phonetic then	
			current_word_first_phoneme ← SPLIT(current_word_phonetic)[0]
			if current_word_first_phoneme = word_first_phoneme then
				APPEND(alliteration_words, dictionary_keys[x])
			end if
		end if
	end for
	return alliteration_words
end function

